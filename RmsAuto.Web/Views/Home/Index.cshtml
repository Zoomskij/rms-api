@using System.Web.Configuration;
@using System.ComponentModel;
@model List<RMSAutoAPI.Models.ApiMethod>
@{
    Layout = "~/Views/Shared/_Layout.cshtml";

}

<!DOCTYPE html>



<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    <link href="~/Content/api.css" rel="stylesheet" />

</head>
<body>

    <br />

    <div class="wrapper">

        [ Base URL: @WebConfigurationManager.AppSettings["UrlApi"] ]
        <br /><br />
        @*<td>@ViewBag.Token</td> <br /><br />*@


        @*<div>
            <h2 class="title"> API.RMSAUTO </h2>
        </div>*@

              <div class="rms-title">
                  API.RMSAUTO представляет собой REST-сервис.
                  Для обращения к методам api нужно пройти авторизацию на сервисе посредством персонального логина/пароля.
                  В ответ будет сгенерирован Bearer токен, который необходимо передавать в HTTP заголовок вызываемого метода.
				  <br /><br />
				  ПРИМЕЧАНИЕ: Клиентам наших региональных партнёров для авторизации необходимо дополнительно передать код партнёра
				  (код партнёра можно получить, воспользовавшись методом /api/Partners).
              </div>

        <div class="opblock-tag-section">
            <div style="height: auto; border: none; margin: 0px; padding: 0px;">
                @foreach (var group in Model.GroupBy(x => x.Group))
            {

                <h4 class="opblock-tag no-desc" id="operations-tag-Articles">
                    <a class="nostyle" href="#/@group.Key"><span>@group.Key</span></a>
                </h4>
                <hr style="margin-bottom:10px; margin-top:15px;" />

            foreach (var item in Model.Where(x => x.Group.Equals(group.Key)))
            {


                    var groupStyle = "opblock opblock-get";
                    if (item.Type.Equals("POST"))
                    {
                        groupStyle = "opblock opblock-post";
                    }

                <div class="@groupStyle" id="operations-Articles-Articles_GetBrands">
                    <a class="nostyle" href="#/@group.Key/@item.Name" data-bind="click:notify.bind(this,'@item.Name')">
                        <div class="opblock-summary opblock-summary-get">
                            <span class="opblock-summary-method">@item.Type</span>
                            <span class="opblock-summary-path">@item.Uri</span>
                            <div class="opblock-summary-description">@item.Description</div>
                        </div>
                        <hr style="width:99.5%; margin-top:0px; margin-bottom:-1px; border-top: 1px solid #61affe;" />
                    </a>

                    <div id="@item.Name" style="height: auto; border: none; margin: 0px; padding: 0px; display:none;">
                        <div class="opblock-body">

                            <div class="opblock-description-wrapper">
                                <div class="opblock-description">
                                    @item.TitleDescription
                                </div>
                            </div>


                            @*============PARAMETERS=============*@
                            @if (Model.FirstOrDefault(x => x.Name.Equals(item.Name)).Parameters.Any())
                            {

                            var idTryIt = @item.Name + "_tryIt";

                            <div class="opblock-section-header">
                                <div class="tab-header">
                                    <span class="opblock-title"><b>Parameters</b></span>
                                    <button id="@idTryIt" class="btn try-out__btn pull-right" data-bind="click:tryIt.bind(this,'@item.Name')">Try it out</button>
                                </div>
                            </div>
                        foreach (var parameter in Model.Where(x => x.Name.Equals(item.Name)).GroupBy(x => x.Parameters))
                        {
                            <div class="col-lg-12 col-md-12 col-xs-12 col-sm-12 row">
                                <div class="col-lg-2 col-md-2 col-xs-2 col-sm-2">
                                    <div class="param-name">Name</div>
                                </div>
                                <div class="col-lg-10 col-md-10 col-xs-10 col-sm-10">
                                    <div class="param-name">Description</div>
                                </div>
                            </div>
                            <hr style="margin-top:5px; margin-bottom:10px" />
                        foreach (var param in parameter.Key)
                        {
                            <div class="col-lg-12 col-md-12 col-xs-12 col-sm-12 row">
                                <div class="col-lg-2 col-md-2 col-xs-2 col-sm-2">
                                    <b>@param.Name </b>
                                    @if (param.IsRequired == true)
                                    {
                                        <span class="required">&nbsp;*&nbsp;required</span>
                                    }
                                </div>
                                <div class="col-lg-10 col-md-10 col-xs-10 col-sm-10">
                                    @param.Description
                                </div>
                            </div>
                            <div class="col-lg-12 col-md-12 col-xs-12 col-sm-12 row">
                                <div class="col-lg-2 col-md-2 col-xs-2 col-sm-2">
                                    @param.Type
                                </div>
                                <div class="col-lg-4 col-md-4 col-xs-4 col-sm-4">
                                    @if ((TypeParameter)param.TypeParameter == TypeParameter.body)
                                    {
                                        var id = item.Name + "_" + param.Name;
                                        <div class="body-param">
                                            <textarea id="@id" class="body-param__text">
                                    
                                            </textarea>
                                        </div>
                                    }
                                    @if (param.Name != "analogues")
                                    {
                                        var id = item.Name + "_" + param.Name;
                                        <input id="@id" style="display:none" type="text" class="" title="" value="" placeholder="@param.Description">
                                    }
                                    @if (param.Name == "analogues")
                                    {
                                        var id = item.Name + "_" + param.Name;
                                        <select id="@id" class="" style="display:none">
                                            <option value="">--</option>
                                            <option value="true">true</option>
                                            <option value="false">false</option>
                                        </select>
                                    }
                                </div>
                            </div>
                            <div class="col-lg-12 col-md-12 col-xs-12 col-sm-12 row">
                                <div class="col-lg-2 col-md-2 col-xs-2 col-sm-2">
                                    (@Enum.GetName(typeof(TypeParameter), param.TypeParameter))
                                </div>
                            </div>

                            <div style="padding-top:20px"></div>
                    }
                }
            }
            @*onclick="executeMethod()"*@
            @*==============EXECUTE================*@
                            @{
                            var idExecute = @item.Name + "_execute";
                            }
                            @if (!Model.FirstOrDefault(x => x.Name.Equals(item.Name)).Parameters.Any())
                            {
                                <div class="execute-wrapper">
                                    <button id="@idExecute" class="btn execute opblock-control__btn" data-bind="click: @item.Name" style="width:100%">Execute</button>
                                </div>
                            }
                            else
                            {
                                <div id="@idExecute" class="execute-wrapper" style="display:none">
                                    <button class="btn execute opblock-control__btn" data-bind="click: @item.Name" style="width:100%">Execute</button>
                                </div>
                            }
                            @{
                            var idLoader = @item.Name + "_loader";
                            }
                            <div id="@idLoader" class="loader" style="display:none">Loading...</div>
                            @*<div id="loading-container" class="loading-container" style="display:none"><div class="loading"></div></div>*@

                            @*===============RESPONSES===============*@
                            <div class="opblock-section-header">
                                <div class="tab-header">
                                    <span class="opblock-title"><b>Responses</b></span>
                                </div>
                            </div>


                            @*  CURL *@
                            @{
                            var idDivCurl = @item.Name + "_divCurl";
                            }
                            <div id="@idDivCurl" style="display:none">
                                <br />
                                <div class="execute-wrapper">
                                    <span class="response-label"> Curl</span>
                                </div>

                                <div class="execute-wrapper" style="padding-top:0">
                                    <pre class="example">
                                                @{ 
                                                    var idCurl = @item.Name + "_curl";
                                                }
                                    <div id="@idCurl" style="margin-top: -40px"></div>
                                                    
                                            </pre>
                                </div>
                            </div>

                            @*  REQUEST URL *@
                            @{
                            var idDivRequestUrl = @item.Name + "_divRequestUrl";
                            }
                            <div id="@idDivRequestUrl" style="display:none">
                                <div class="execute-wrapper">
                                    <span class="response-label"> Request URL</span>
                                </div>

                                <div class="execute-wrapper" style="padding-top:0">
                                    <pre class="example" style="height:30px;">
                                                @{ 
                                                    var idRequestUrl = @item.Name + "_request-url";
                                                }
                                    <div class="request-url" id="@idRequestUrl" style="margin-top: -40px"></div>
                                                    
                                            </pre>
                                </div>
                            </div>
                            @* ====================== *@



                            <br />
                            <div class="col-lg-12 col-md-12 col-xs-12 col-sm-12 row">
                                <div class="col-lg-2 col-md-2 col-xs-2 col-sm-2">
                                    <span class="response-label"> Server response</span>
                                </div>
                            </div>

                            <br />
                            <div class="col-lg-12 col-md-12 col-xs-12 col-sm-12 row">
                                <div class="col-lg-2 col-md-2 col-xs-2 col-sm-2">
                                    <b>Code</b>
                                </div>
                                <div class="col-lg-10 col-md-10 col-xs-10 col-sm-10">
                                    <b>Details</b>
                                </div>
                            </div>
                            <hr style="margin-top:5px; margin-bottom:10px" />

                            <div style="margin-top:20px"></div>


                            <div class="col-lg-12 col-md-12 col-xs-12 col-sm-12 row">
                                <div class="col-lg-2 col-md-2 col-xs-2 col-sm-2">
                                    @{
                                    var idCode = item.Name + "_code";
                                    }
                                    <div id="@idCode"></div>
                                </div>
                                <div class="col-lg-10 col-md-10 col-xs-10 col-sm-10">
                                    <pre class="example" style="margin-right: -25px;">

                                                @{ 
                                                    var idResp = @item.Name + "_resp";
                                                }
                                            
<div id="@idResp" style="margin-top: -50px; overflow-y:auto; max-height:600px">
@switch (item.Name)
{
    case "GetBrands":
<span>
[
  {
    "Name": "string",
    "Description": "string"
  }
]
</span>
    break;
case "GetSpareParts":
<span>
[
  {
    "Brand": "string",
    "Article": "string",
    "Name": "string",
    "Type": 0,
    "DeliveryQuality": 0,
    "Count": 0,
    "DeliveryDaysMin": 0,
    "DeliveryDaysMax": 0,
    "Price": 0,
    "SupplierID": 0,
    "MinOrderQty": 0
  }
]
</span>                                                     
    break;
case "GetPartners":
<span>
[
  {
    "City": "string",
    "Code": "string",
    "Name": "string"
  }
]
</span>
    break;
}
</div>

                                            </pre>
                                </div>
                            </div>

                            <div style="padding-bottom:20px"></div>
                        </div>
                    </div>
                </div>
        }
    }


            </div>
        </div>



        @*MODELS*@
        <section class="models">
            <div id="models-header" class="models-header">
                <h4>
                    <span>Models</span>
                    <svg width="20" height="20"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#large-arrow-down"></use></svg>
                </h4>
            </div>
            <div id="all-models" style="height: auto; border: none; margin: 0px; padding: 0px; display:block;">

                @foreach (var method in Model)
                {
                <div id="model-Brand" class="model-container">
                    <div class="model-box">
                        <p><span class="model-title"> @method.Response.GetType().Name</span> { </p>
                        @foreach (var property in @method.Response.GetType().GetProperties())
                        {
                        <table class="properties">
                            <tr>
                                <td valign="top" width="150">
                                    <span class="prop-name">@property.Name </span>
                                </td>
                                <td valign="top">
                                    <span class="model">
                                        <span class="prop">
                                            <span class="prop-type">
                                                @if (property.PropertyType.Name.ToLower().Equals("nullable`1"))
                                                {
                                                    <span>int32 (nullable)</span>
                                                }
                                                else if (property.PropertyType.Name.ToLower().Equals("sparepartitemtype"))
                                                {
                                                    <span>int32 </span>
                                                }
                                                else if (property.PropertyType.Name.ToLower().Equals("quality"))
                                                {
                                                    <span>int32 </span>
                                                }
                                                else
                                                {
                                                    @property.PropertyType.Name.ToLower()
                                                }

                                            </span>
                                            <div class="markdown">
                                                <span>
                                                    @{
                                                    if (method.Response.GetType().Name.Equals("Brand"))
                                                    {
                                                        var prop = typeof(RMSAutoAPI.Models.Brand).GetProperty(property.Name);
                                                        if (prop != null)
                                                        {
                                                            var attribute = (System.ComponentModel.DescriptionAttribute)prop.GetCustomAttributes(typeof(DescriptionAttribute), true)[0];
                                                            <p>@attribute.Description</p>
                                                    }
                                                }

                                                if (method.Response.GetType().Name.Equals("PartNumber"))
                                                {
                                                    var prop = typeof(RMSAutoAPI.Models.PartNumber).GetProperty(property.Name);
                                                    if (prop != null)
                                                    {
                                                        var attribute = (System.ComponentModel.DescriptionAttribute)prop.GetCustomAttributes(typeof(DescriptionAttribute), true)[0];
                                                        <p>@attribute.Description</p>
                                                }
                                            }

                                            if (method.Response.GetType().Name.Equals("Partner"))
                                            {
                                                var prop = typeof(RMSAutoAPI.Models.Partner).GetProperty(property.Name);
                                                if (prop != null)
                                                {
                                                    var attribute = (System.ComponentModel.DescriptionAttribute)prop.GetCustomAttributes(typeof(DescriptionAttribute), true)[0];
                                                    <p>@attribute.Description</p>
                                            }
                                        }

                                                    }
                                                </span>

                                            </div>
                                        </span>
                                    </span>
                                </td>
                            </tr>
                        </table>
                }
                        }
                    </div>
                </div>
        }
            </div>
        </section>

    </div> @*End wrapper*@




    @*<ul data-bind="foreach: methods">
        <strong data-bind="text: Name"></strong>

    </ul>*@

    <script type="text/javascript">
        var jsonModel = @Html.Raw(Json.Encode(@Model));
        var orderModel = @Html.Raw(Json.Encode(@ViewBag.OrderModel));
        var token = @Html.Raw(Json.Encode(@ViewBag.Token));
    </script>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/bundles/bootstrap")
    <script src="~/Scripts/app.js"></script>

</body>
</html>
